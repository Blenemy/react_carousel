{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","step","frameSize","itemWidth","animationDuration","infinite","transtaleX","this","images","props","containerWidth","maxContainerWidth","length","translateShift","containerStyle","maxWidth","listAnimationStyle","transition","transform","className","classnames","Carousel__button","Carousel__button_left","disabledLeft","type","disabled","onClick","setState","style","map","item","height","width","src","alt","match","join","Carousel__button_right","disabledRight","htmlFor","onInput","e","currentTarget","value","min","max","defaultValue","Math","round","onChange","target","checked","React","Component","App","display","justifyContent","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12c04419.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n}\n\ninterface State {\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n  transtaleX: number,\n}\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    transtaleX: 0,\n  };\n\n  render() {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      transtaleX,\n    } = this.state;\n\n    const { images } = this.props;\n\n    const containerWidth = frameSize * itemWidth;\n    const maxContainerWidth = itemWidth * images.length;\n    const translateShift = step * itemWidth;\n\n    const containerStyle = {\n      maxWidth: `${containerWidth}px`,\n    };\n\n    const listAnimationStyle = {\n      transition: `all ${animationDuration / 1000}s ease 0s`,\n      transform: `translateX(${transtaleX}px)`,\n    };\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"Carousel\">\n          <button\n            className={classnames({\n              Carousel__button: true,\n              Carousel__button_left: true,\n              disabledLeft: transtaleX === 0,\n            })}\n            type=\"button\"\n            disabled={transtaleX === 0}\n            onClick={() => {\n              if (transtaleX + translateShift > 0) {\n                this.setState({ transtaleX: 0 });\n\n                return;\n              }\n\n              this.setState({ transtaleX: transtaleX + translateShift });\n            }}\n          >\n            {' '}\n          </button>\n          <div className=\"Carousel__container\" style={containerStyle}>\n            <ul className={`Carousel__list ${infinite ? '_active' : ''}`} style={listAnimationStyle}>\n              {images.map(item => (\n                <li\n                  key={item}\n                >\n                  <img\n                    height={itemWidth}\n                    width={itemWidth}\n                    src={item}\n                    alt={item.match(/\\d+/g)?.join('')}\n                  />\n                </li>\n              ))}\n            </ul>\n          </div>\n          <button\n            type=\"button\"\n            className={classnames({\n              Carousel__button: true,\n              Carousel__button_right: true,\n              disabledRight: transtaleX === -maxContainerWidth + containerWidth,\n            })}\n            data-cy=\"next\"\n            disabled={transtaleX === -maxContainerWidth + containerWidth}\n            onClick={() => {\n              if (transtaleX + (-translateShift)\n                - containerWidth <= -maxContainerWidth) {\n                this.setState({\n                  transtaleX: -maxContainerWidth + containerWidth,\n                });\n\n                return;\n              }\n\n              this.setState({ transtaleX: transtaleX + -translateShift });\n            }}\n          >\n            {' '}\n          </button>\n        </div>\n        <div className=\"wrapper__items\">\n          <div className=\"wrapper__item wrapper__item-framesize\">\n            <label htmlFor=\"\">\n              {`Frame size is ${frameSize} `}\n              <input\n                onInput={(e) => {\n                  this.setState({\n                    frameSize: +e.currentTarget.value,\n                  });\n                }}\n                type=\"range\"\n                min={2}\n                max={5}\n                defaultValue={frameSize}\n              />\n            </label>\n          </div>\n          <div className=\"wrapper__item wrapper__item-step\">\n            <label htmlFor=\"\">\n              {`Step number is ${step} `}\n              <input\n                onInput={(e) => {\n                  this.setState({\n                    step: +e.currentTarget.value,\n                  });\n                }}\n                type=\"range\"\n                min={2}\n                max={5}\n                defaultValue={step}\n              />\n            </label>\n          </div>\n          <div className=\"wrapper__item wrapper__item-itemWidth\">\n            <label htmlFor=\"\">\n              {`Itemwidth is ${itemWidth}px `}\n              <input\n                onInput={(e) => {\n                  this.setState({\n                    itemWidth: +e.currentTarget.value,\n                  });\n                }}\n                type=\"range\"\n                min={130}\n                max={200}\n                defaultValue={itemWidth}\n              />\n            </label>\n          </div>\n          <div className=\"wrapper__item wrapper__item-animationDuration\">\n            <label htmlFor=\"\">\n              {`Animation duration is ${Math.round(animationDuration / 1000)}s `}\n              <input\n                onInput={(e) => {\n                  this.setState({\n                    animationDuration: +e.currentTarget.value,\n                  });\n                }}\n                type=\"range\"\n                min={1000}\n                max={3000}\n                defaultValue={animationDuration}\n              />\n            </label>\n          </div>\n          <div className=\"wrapper__item wrapper__item-infinite\">\n            <label htmlFor=\"\">\n              {'Infinite '}\n              <input\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    this.setState({ infinite: true });\n\n                    return;\n                  }\n\n                  if (!e.target.checked) {\n                    this.setState({ infinite: false });\n                  }\n                }}\n                type=\"checkbox\"\n              />\n            </label>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nclass App extends React.Component<{}, {}> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          data-cy=\"title\"\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            fontSize: '30px',\n          }}\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}